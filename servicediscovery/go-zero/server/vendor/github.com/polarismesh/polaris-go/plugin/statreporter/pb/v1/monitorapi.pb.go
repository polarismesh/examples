// Code generated by protoc-gen-go. DO NOT EDIT.
// source: monitorapi.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("monitorapi.proto", fileDescriptor_a3a0a967d8cb0c15) }

var fileDescriptor_a3a0a967d8cb0c15 = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x4e, 0xe3, 0x30,
	0x10, 0x87, 0xb7, 0x7b, 0xe8, 0x4a, 0x96, 0x76, 0x5b, 0xb9, 0xff, 0x56, 0x39, 0x72, 0xe2, 0x54,
	0x51, 0xb8, 0x21, 0x2e, 0x6d, 0x0a, 0x55, 0xa0, 0x48, 0x55, 0xfa, 0x04, 0xae, 0x33, 0x6d, 0xad,
	0xa6, 0x9e, 0x60, 0x3b, 0x79, 0x12, 0x1e, 0x18, 0x25, 0x71, 0x82, 0x09, 0x04, 0x71, 0xfd, 0xe2,
	0xf9, 0xfc, 0x1b, 0xcf, 0x84, 0xf4, 0xcf, 0x28, 0x85, 0x41, 0xc5, 0x12, 0x31, 0x4d, 0x14, 0x1a,
	0xa4, 0xbf, 0xb3, 0x99, 0x37, 0xb4, 0x54, 0xc1, 0x4b, 0x0a, 0xda, 0x94, 0x5f, 0xbc, 0x51, 0x4d,
	0x75, 0x82, 0x52, 0x83, 0xc5, 0x63, 0x1d, 0x9d, 0x38, 0xca, 0xbd, 0x38, 0xa4, 0x8a, 0x19, 0x81,
	0xd2, 0xf2, 0x7f, 0x39, 0x67, 0xfc, 0x58, 0x9d, 0xa3, 0x5c, 0x28, 0x9e, 0x0a, 0xb3, 0x53, 0xc0,
	0x4e, 0x96, 0xf5, 0x93, 0x38, 0x3d, 0x08, 0x29, 0xe4, 0x1e, 0x2d, 0x19, 0xea, 0xe8, 0x14, 0x23,
	0x8b, 0x76, 0x2c, 0x66, 0x92, 0xbf, 0xdf, 0x01, 0x2a, 0x13, 0x1c, 0x14, 0x33, 0x10, 0x8b, 0xb3,
	0xa8, 0x22, 0xd1, 0x8a, 0x63, 0x6a, 0xec, 0xd9, 0xeb, 0xd7, 0x2e, 0xf9, 0xb3, 0x52, 0x09, 0x9f,
	0x6f, 0x02, 0xba, 0x22, 0x13, 0x1f, 0xe3, 0x18, 0xb8, 0xd9, 0x82, 0xca, 0x40, 0x6d, 0x0d, 0x33,
	0x42, 0x1b, 0xc1, 0x35, 0x1d, 0x4e, 0xb3, 0xd9, 0xb4, 0x49, 0xbd, 0x7e, 0x41, 0x0d, 0x33, 0xa1,
	0x6d, 0xf2, 0xe2, 0xd7, 0x65, 0xe7, 0xaa, 0xe3, 0x8a, 0x96, 0x4f, 0xf3, 0x4d, 0xf0, 0x49, 0xd4,
	0xa0, 0xad, 0xa2, 0x80, 0xfc, 0x77, 0x12, 0x09, 0x0e, 0x8e, 0x69, 0x54, 0x45, 0xfa, 0x80, 0x5b,
	0x55, 0x77, 0x6e, 0x26, 0xdf, 0x9d, 0x00, 0xfd, 0x6b, 0x33, 0x95, 0xf4, 0x2b, 0x03, 0xbd, 0x25,
	0x3d, 0xa7, 0x3a, 0x9f, 0x13, 0xed, 0x39, 0xf7, 0x07, 0x72, 0x8f, 0xad, 0x37, 0x3f, 0x90, 0x81,
	0xad, 0xf5, 0xcb, 0x99, 0x2e, 0xf2, 0x99, 0xd2, 0x89, 0x53, 0xef, 0x3b, 0xc3, 0x6e, 0xf5, 0x3c,
	0xd6, 0x1d, 0x6c, 0x8a, 0x3d, 0x70, 0xde, 0xa2, 0x70, 0x95, 0xf4, 0x67, 0x0f, 0xbb, 0x26, 0x63,
	0xeb, 0x5a, 0x23, 0x8b, 0x16, 0xe5, 0xfa, 0xe4, 0x5d, 0x50, 0xcf, 0x89, 0xd5, 0xf8, 0xd6, 0x6a,
	0xbb, 0xaf, 0x6d, 0x21, 0x33, 0xb0, 0xce, 0x57, 0x2e, 0x04, 0x8e, 0x2a, 0xa2, 0x83, 0xbc, 0xa2,
	0x01, 0x5b, 0x35, 0x4b, 0x42, 0x2b, 0x4d, 0xbe, 0xa1, 0x56, 0x31, 0x76, 0x02, 0x39, 0xbc, 0xd5,
	0xe2, 0xd7, 0xcf, 0xfd, 0x0c, 0xfa, 0x18, 0x82, 0xc6, 0x54, 0x71, 0x28, 0x17, 0xcf, 0x25, 0xdf,
	0x75, 0xb4, 0xeb, 0x16, 0x7f, 0xc7, 0xcd, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x32, 0x7d, 0x02,
	0xaf, 0xf2, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GrpcAPIClient is the client API for GrpcAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcAPIClient interface {
	CollectServerStatistics(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectServerStatisticsClient, error)
	CollectSDKAPIStatistics(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectSDKAPIStatisticsClient, error)
	CollectServiceStatistics(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectServiceStatisticsClient, error)
	CollectSDKConfiguration(ctx context.Context, in *SDKConfig, opts ...grpc.CallOption) (*StatResponse, error)
	CollectSDKCache(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectSDKCacheClient, error)
	CollectCircuitBreak(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectCircuitBreakClient, error)
	CollectPluginStatistics(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectPluginStatisticsClient, error)
	CollectLoadBalanceInfo(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectLoadBalanceInfoClient, error)
	CollectRateLimitRecord(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectRateLimitRecordClient, error)
	CollectRouteRecord(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectRouteRecordClient, error)
	CollectMeshResource(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectMeshResourceClient, error)
}

type grpcAPIClient struct {
	cc *grpc.ClientConn
}

func NewGrpcAPIClient(cc *grpc.ClientConn) GrpcAPIClient {
	return &grpcAPIClient{cc}
}

func (c *grpcAPIClient) CollectServerStatistics(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectServerStatisticsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcAPI_serviceDesc.Streams[0], "/v1.GrpcAPI/CollectServerStatistics", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcAPICollectServerStatisticsClient{stream}
	return x, nil
}

type GrpcAPI_CollectServerStatisticsClient interface {
	Send(*ServerStatistics) error
	Recv() (*StatResponse, error)
	grpc.ClientStream
}

type grpcAPICollectServerStatisticsClient struct {
	grpc.ClientStream
}

func (x *grpcAPICollectServerStatisticsClient) Send(m *ServerStatistics) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcAPICollectServerStatisticsClient) Recv() (*StatResponse, error) {
	m := new(StatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcAPIClient) CollectSDKAPIStatistics(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectSDKAPIStatisticsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcAPI_serviceDesc.Streams[1], "/v1.GrpcAPI/CollectSDKAPIStatistics", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcAPICollectSDKAPIStatisticsClient{stream}
	return x, nil
}

type GrpcAPI_CollectSDKAPIStatisticsClient interface {
	Send(*SDKAPIStatistics) error
	Recv() (*StatResponse, error)
	grpc.ClientStream
}

type grpcAPICollectSDKAPIStatisticsClient struct {
	grpc.ClientStream
}

func (x *grpcAPICollectSDKAPIStatisticsClient) Send(m *SDKAPIStatistics) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcAPICollectSDKAPIStatisticsClient) Recv() (*StatResponse, error) {
	m := new(StatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcAPIClient) CollectServiceStatistics(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectServiceStatisticsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcAPI_serviceDesc.Streams[2], "/v1.GrpcAPI/CollectServiceStatistics", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcAPICollectServiceStatisticsClient{stream}
	return x, nil
}

type GrpcAPI_CollectServiceStatisticsClient interface {
	Send(*ServiceStatistics) error
	Recv() (*StatResponse, error)
	grpc.ClientStream
}

type grpcAPICollectServiceStatisticsClient struct {
	grpc.ClientStream
}

func (x *grpcAPICollectServiceStatisticsClient) Send(m *ServiceStatistics) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcAPICollectServiceStatisticsClient) Recv() (*StatResponse, error) {
	m := new(StatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcAPIClient) CollectSDKConfiguration(ctx context.Context, in *SDKConfig, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, "/v1.GrpcAPI/CollectSDKConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcAPIClient) CollectSDKCache(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectSDKCacheClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcAPI_serviceDesc.Streams[3], "/v1.GrpcAPI/CollectSDKCache", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcAPICollectSDKCacheClient{stream}
	return x, nil
}

type GrpcAPI_CollectSDKCacheClient interface {
	Send(*ServiceInfo) error
	Recv() (*StatResponse, error)
	grpc.ClientStream
}

type grpcAPICollectSDKCacheClient struct {
	grpc.ClientStream
}

func (x *grpcAPICollectSDKCacheClient) Send(m *ServiceInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcAPICollectSDKCacheClient) Recv() (*StatResponse, error) {
	m := new(StatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcAPIClient) CollectCircuitBreak(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectCircuitBreakClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcAPI_serviceDesc.Streams[4], "/v1.GrpcAPI/CollectCircuitBreak", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcAPICollectCircuitBreakClient{stream}
	return x, nil
}

type GrpcAPI_CollectCircuitBreakClient interface {
	Send(*ServiceCircuitbreak) error
	Recv() (*StatResponse, error)
	grpc.ClientStream
}

type grpcAPICollectCircuitBreakClient struct {
	grpc.ClientStream
}

func (x *grpcAPICollectCircuitBreakClient) Send(m *ServiceCircuitbreak) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcAPICollectCircuitBreakClient) Recv() (*StatResponse, error) {
	m := new(StatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcAPIClient) CollectPluginStatistics(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectPluginStatisticsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcAPI_serviceDesc.Streams[5], "/v1.GrpcAPI/CollectPluginStatistics", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcAPICollectPluginStatisticsClient{stream}
	return x, nil
}

type GrpcAPI_CollectPluginStatisticsClient interface {
	Send(*PluginAPIStatistics) error
	Recv() (*StatResponse, error)
	grpc.ClientStream
}

type grpcAPICollectPluginStatisticsClient struct {
	grpc.ClientStream
}

func (x *grpcAPICollectPluginStatisticsClient) Send(m *PluginAPIStatistics) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcAPICollectPluginStatisticsClient) Recv() (*StatResponse, error) {
	m := new(StatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcAPIClient) CollectLoadBalanceInfo(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectLoadBalanceInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcAPI_serviceDesc.Streams[6], "/v1.GrpcAPI/CollectLoadBalanceInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcAPICollectLoadBalanceInfoClient{stream}
	return x, nil
}

type GrpcAPI_CollectLoadBalanceInfoClient interface {
	Send(*ServiceLoadBalanceInfo) error
	Recv() (*StatResponse, error)
	grpc.ClientStream
}

type grpcAPICollectLoadBalanceInfoClient struct {
	grpc.ClientStream
}

func (x *grpcAPICollectLoadBalanceInfoClient) Send(m *ServiceLoadBalanceInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcAPICollectLoadBalanceInfoClient) Recv() (*StatResponse, error) {
	m := new(StatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcAPIClient) CollectRateLimitRecord(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectRateLimitRecordClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcAPI_serviceDesc.Streams[7], "/v1.GrpcAPI/CollectRateLimitRecord", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcAPICollectRateLimitRecordClient{stream}
	return x, nil
}

type GrpcAPI_CollectRateLimitRecordClient interface {
	Send(*RateLimitRecord) error
	Recv() (*StatResponse, error)
	grpc.ClientStream
}

type grpcAPICollectRateLimitRecordClient struct {
	grpc.ClientStream
}

func (x *grpcAPICollectRateLimitRecordClient) Send(m *RateLimitRecord) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcAPICollectRateLimitRecordClient) Recv() (*StatResponse, error) {
	m := new(StatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcAPIClient) CollectRouteRecord(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectRouteRecordClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcAPI_serviceDesc.Streams[8], "/v1.GrpcAPI/CollectRouteRecord", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcAPICollectRouteRecordClient{stream}
	return x, nil
}

type GrpcAPI_CollectRouteRecordClient interface {
	Send(*ServiceRouteRecord) error
	Recv() (*StatResponse, error)
	grpc.ClientStream
}

type grpcAPICollectRouteRecordClient struct {
	grpc.ClientStream
}

func (x *grpcAPICollectRouteRecordClient) Send(m *ServiceRouteRecord) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcAPICollectRouteRecordClient) Recv() (*StatResponse, error) {
	m := new(StatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcAPIClient) CollectMeshResource(ctx context.Context, opts ...grpc.CallOption) (GrpcAPI_CollectMeshResourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcAPI_serviceDesc.Streams[9], "/v1.GrpcAPI/CollectMeshResource", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcAPICollectMeshResourceClient{stream}
	return x, nil
}

type GrpcAPI_CollectMeshResourceClient interface {
	Send(*MeshResourceInfo) error
	Recv() (*StatResponse, error)
	grpc.ClientStream
}

type grpcAPICollectMeshResourceClient struct {
	grpc.ClientStream
}

func (x *grpcAPICollectMeshResourceClient) Send(m *MeshResourceInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcAPICollectMeshResourceClient) Recv() (*StatResponse, error) {
	m := new(StatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcAPIServer is the server API for GrpcAPI service.
type GrpcAPIServer interface {
	CollectServerStatistics(GrpcAPI_CollectServerStatisticsServer) error
	CollectSDKAPIStatistics(GrpcAPI_CollectSDKAPIStatisticsServer) error
	CollectServiceStatistics(GrpcAPI_CollectServiceStatisticsServer) error
	CollectSDKConfiguration(context.Context, *SDKConfig) (*StatResponse, error)
	CollectSDKCache(GrpcAPI_CollectSDKCacheServer) error
	CollectCircuitBreak(GrpcAPI_CollectCircuitBreakServer) error
	CollectPluginStatistics(GrpcAPI_CollectPluginStatisticsServer) error
	CollectLoadBalanceInfo(GrpcAPI_CollectLoadBalanceInfoServer) error
	CollectRateLimitRecord(GrpcAPI_CollectRateLimitRecordServer) error
	CollectRouteRecord(GrpcAPI_CollectRouteRecordServer) error
	CollectMeshResource(GrpcAPI_CollectMeshResourceServer) error
}

// UnimplementedGrpcAPIServer can be embedded to have forward compatible implementations.
type UnimplementedGrpcAPIServer struct {
}

func (*UnimplementedGrpcAPIServer) CollectServerStatistics(srv GrpcAPI_CollectServerStatisticsServer) error {
	return status.Errorf(codes.Unimplemented, "method CollectServerStatistics not implemented")
}
func (*UnimplementedGrpcAPIServer) CollectSDKAPIStatistics(srv GrpcAPI_CollectSDKAPIStatisticsServer) error {
	return status.Errorf(codes.Unimplemented, "method CollectSDKAPIStatistics not implemented")
}
func (*UnimplementedGrpcAPIServer) CollectServiceStatistics(srv GrpcAPI_CollectServiceStatisticsServer) error {
	return status.Errorf(codes.Unimplemented, "method CollectServiceStatistics not implemented")
}
func (*UnimplementedGrpcAPIServer) CollectSDKConfiguration(ctx context.Context, req *SDKConfig) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectSDKConfiguration not implemented")
}
func (*UnimplementedGrpcAPIServer) CollectSDKCache(srv GrpcAPI_CollectSDKCacheServer) error {
	return status.Errorf(codes.Unimplemented, "method CollectSDKCache not implemented")
}
func (*UnimplementedGrpcAPIServer) CollectCircuitBreak(srv GrpcAPI_CollectCircuitBreakServer) error {
	return status.Errorf(codes.Unimplemented, "method CollectCircuitBreak not implemented")
}
func (*UnimplementedGrpcAPIServer) CollectPluginStatistics(srv GrpcAPI_CollectPluginStatisticsServer) error {
	return status.Errorf(codes.Unimplemented, "method CollectPluginStatistics not implemented")
}
func (*UnimplementedGrpcAPIServer) CollectLoadBalanceInfo(srv GrpcAPI_CollectLoadBalanceInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method CollectLoadBalanceInfo not implemented")
}
func (*UnimplementedGrpcAPIServer) CollectRateLimitRecord(srv GrpcAPI_CollectRateLimitRecordServer) error {
	return status.Errorf(codes.Unimplemented, "method CollectRateLimitRecord not implemented")
}
func (*UnimplementedGrpcAPIServer) CollectRouteRecord(srv GrpcAPI_CollectRouteRecordServer) error {
	return status.Errorf(codes.Unimplemented, "method CollectRouteRecord not implemented")
}
func (*UnimplementedGrpcAPIServer) CollectMeshResource(srv GrpcAPI_CollectMeshResourceServer) error {
	return status.Errorf(codes.Unimplemented, "method CollectMeshResource not implemented")
}

func RegisterGrpcAPIServer(s *grpc.Server, srv GrpcAPIServer) {
	s.RegisterService(&_GrpcAPI_serviceDesc, srv)
}

func _GrpcAPI_CollectServerStatistics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcAPIServer).CollectServerStatistics(&grpcAPICollectServerStatisticsServer{stream})
}

type GrpcAPI_CollectServerStatisticsServer interface {
	Send(*StatResponse) error
	Recv() (*ServerStatistics, error)
	grpc.ServerStream
}

type grpcAPICollectServerStatisticsServer struct {
	grpc.ServerStream
}

func (x *grpcAPICollectServerStatisticsServer) Send(m *StatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcAPICollectServerStatisticsServer) Recv() (*ServerStatistics, error) {
	m := new(ServerStatistics)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcAPI_CollectSDKAPIStatistics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcAPIServer).CollectSDKAPIStatistics(&grpcAPICollectSDKAPIStatisticsServer{stream})
}

type GrpcAPI_CollectSDKAPIStatisticsServer interface {
	Send(*StatResponse) error
	Recv() (*SDKAPIStatistics, error)
	grpc.ServerStream
}

type grpcAPICollectSDKAPIStatisticsServer struct {
	grpc.ServerStream
}

func (x *grpcAPICollectSDKAPIStatisticsServer) Send(m *StatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcAPICollectSDKAPIStatisticsServer) Recv() (*SDKAPIStatistics, error) {
	m := new(SDKAPIStatistics)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcAPI_CollectServiceStatistics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcAPIServer).CollectServiceStatistics(&grpcAPICollectServiceStatisticsServer{stream})
}

type GrpcAPI_CollectServiceStatisticsServer interface {
	Send(*StatResponse) error
	Recv() (*ServiceStatistics, error)
	grpc.ServerStream
}

type grpcAPICollectServiceStatisticsServer struct {
	grpc.ServerStream
}

func (x *grpcAPICollectServiceStatisticsServer) Send(m *StatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcAPICollectServiceStatisticsServer) Recv() (*ServiceStatistics, error) {
	m := new(ServiceStatistics)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcAPI_CollectSDKConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDKConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcAPIServer).CollectSDKConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GrpcAPI/CollectSDKConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcAPIServer).CollectSDKConfiguration(ctx, req.(*SDKConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcAPI_CollectSDKCache_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcAPIServer).CollectSDKCache(&grpcAPICollectSDKCacheServer{stream})
}

type GrpcAPI_CollectSDKCacheServer interface {
	Send(*StatResponse) error
	Recv() (*ServiceInfo, error)
	grpc.ServerStream
}

type grpcAPICollectSDKCacheServer struct {
	grpc.ServerStream
}

func (x *grpcAPICollectSDKCacheServer) Send(m *StatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcAPICollectSDKCacheServer) Recv() (*ServiceInfo, error) {
	m := new(ServiceInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcAPI_CollectCircuitBreak_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcAPIServer).CollectCircuitBreak(&grpcAPICollectCircuitBreakServer{stream})
}

type GrpcAPI_CollectCircuitBreakServer interface {
	Send(*StatResponse) error
	Recv() (*ServiceCircuitbreak, error)
	grpc.ServerStream
}

type grpcAPICollectCircuitBreakServer struct {
	grpc.ServerStream
}

func (x *grpcAPICollectCircuitBreakServer) Send(m *StatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcAPICollectCircuitBreakServer) Recv() (*ServiceCircuitbreak, error) {
	m := new(ServiceCircuitbreak)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcAPI_CollectPluginStatistics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcAPIServer).CollectPluginStatistics(&grpcAPICollectPluginStatisticsServer{stream})
}

type GrpcAPI_CollectPluginStatisticsServer interface {
	Send(*StatResponse) error
	Recv() (*PluginAPIStatistics, error)
	grpc.ServerStream
}

type grpcAPICollectPluginStatisticsServer struct {
	grpc.ServerStream
}

func (x *grpcAPICollectPluginStatisticsServer) Send(m *StatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcAPICollectPluginStatisticsServer) Recv() (*PluginAPIStatistics, error) {
	m := new(PluginAPIStatistics)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcAPI_CollectLoadBalanceInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcAPIServer).CollectLoadBalanceInfo(&grpcAPICollectLoadBalanceInfoServer{stream})
}

type GrpcAPI_CollectLoadBalanceInfoServer interface {
	Send(*StatResponse) error
	Recv() (*ServiceLoadBalanceInfo, error)
	grpc.ServerStream
}

type grpcAPICollectLoadBalanceInfoServer struct {
	grpc.ServerStream
}

func (x *grpcAPICollectLoadBalanceInfoServer) Send(m *StatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcAPICollectLoadBalanceInfoServer) Recv() (*ServiceLoadBalanceInfo, error) {
	m := new(ServiceLoadBalanceInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcAPI_CollectRateLimitRecord_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcAPIServer).CollectRateLimitRecord(&grpcAPICollectRateLimitRecordServer{stream})
}

type GrpcAPI_CollectRateLimitRecordServer interface {
	Send(*StatResponse) error
	Recv() (*RateLimitRecord, error)
	grpc.ServerStream
}

type grpcAPICollectRateLimitRecordServer struct {
	grpc.ServerStream
}

func (x *grpcAPICollectRateLimitRecordServer) Send(m *StatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcAPICollectRateLimitRecordServer) Recv() (*RateLimitRecord, error) {
	m := new(RateLimitRecord)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcAPI_CollectRouteRecord_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcAPIServer).CollectRouteRecord(&grpcAPICollectRouteRecordServer{stream})
}

type GrpcAPI_CollectRouteRecordServer interface {
	Send(*StatResponse) error
	Recv() (*ServiceRouteRecord, error)
	grpc.ServerStream
}

type grpcAPICollectRouteRecordServer struct {
	grpc.ServerStream
}

func (x *grpcAPICollectRouteRecordServer) Send(m *StatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcAPICollectRouteRecordServer) Recv() (*ServiceRouteRecord, error) {
	m := new(ServiceRouteRecord)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcAPI_CollectMeshResource_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcAPIServer).CollectMeshResource(&grpcAPICollectMeshResourceServer{stream})
}

type GrpcAPI_CollectMeshResourceServer interface {
	Send(*StatResponse) error
	Recv() (*MeshResourceInfo, error)
	grpc.ServerStream
}

type grpcAPICollectMeshResourceServer struct {
	grpc.ServerStream
}

func (x *grpcAPICollectMeshResourceServer) Send(m *StatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcAPICollectMeshResourceServer) Recv() (*MeshResourceInfo, error) {
	m := new(MeshResourceInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GrpcAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.GrpcAPI",
	HandlerType: (*GrpcAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectSDKConfiguration",
			Handler:    _GrpcAPI_CollectSDKConfiguration_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CollectServerStatistics",
			Handler:       _GrpcAPI_CollectServerStatistics_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CollectSDKAPIStatistics",
			Handler:       _GrpcAPI_CollectSDKAPIStatistics_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CollectServiceStatistics",
			Handler:       _GrpcAPI_CollectServiceStatistics_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CollectSDKCache",
			Handler:       _GrpcAPI_CollectSDKCache_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CollectCircuitBreak",
			Handler:       _GrpcAPI_CollectCircuitBreak_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CollectPluginStatistics",
			Handler:       _GrpcAPI_CollectPluginStatistics_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CollectLoadBalanceInfo",
			Handler:       _GrpcAPI_CollectLoadBalanceInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CollectRateLimitRecord",
			Handler:       _GrpcAPI_CollectRateLimitRecord_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CollectRouteRecord",
			Handler:       _GrpcAPI_CollectRouteRecord_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CollectMeshResource",
			Handler:       _GrpcAPI_CollectMeshResource_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "monitorapi.proto",
}
